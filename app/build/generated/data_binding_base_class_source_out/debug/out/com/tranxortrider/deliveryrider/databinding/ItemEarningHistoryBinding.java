// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemEarningHistoryBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final TextView earningAmount;

  @NonNull
  public final TextView earningDate;

  @NonNull
  public final TextView earningDescription;

  @NonNull
  public final TextView orderReference;

  private ItemEarningHistoryBinding(@NonNull MaterialCardView rootView,
      @NonNull TextView earningAmount, @NonNull TextView earningDate,
      @NonNull TextView earningDescription, @NonNull TextView orderReference) {
    this.rootView = rootView;
    this.earningAmount = earningAmount;
    this.earningDate = earningDate;
    this.earningDescription = earningDescription;
    this.orderReference = orderReference;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemEarningHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemEarningHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_earning_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemEarningHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.earningAmount;
      TextView earningAmount = ViewBindings.findChildViewById(rootView, id);
      if (earningAmount == null) {
        break missingId;
      }

      id = R.id.earningDate;
      TextView earningDate = ViewBindings.findChildViewById(rootView, id);
      if (earningDate == null) {
        break missingId;
      }

      id = R.id.earningDescription;
      TextView earningDescription = ViewBindings.findChildViewById(rootView, id);
      if (earningDescription == null) {
        break missingId;
      }

      id = R.id.orderReference;
      TextView orderReference = ViewBindings.findChildViewById(rootView, id);
      if (orderReference == null) {
        break missingId;
      }

      return new ItemEarningHistoryBinding((MaterialCardView) rootView, earningAmount, earningDate,
          earningDescription, orderReference);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
