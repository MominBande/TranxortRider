// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCreateNewPasswordBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView appLogo;

  @NonNull
  public final TextInputEditText confirmPasswordEditText;

  @NonNull
  public final TextInputLayout confirmPasswordInputLayout;

  @NonNull
  public final TextView instructionText;

  @NonNull
  public final TextInputEditText newPasswordEditText;

  @NonNull
  public final TextInputLayout passwordInputLayout;

  @NonNull
  public final ProgressBar passwordStrengthIndicator;

  @NonNull
  public final TextView passwordStrengthText;

  @NonNull
  public final MaterialButton resetButton;

  @NonNull
  public final TextView titleText;

  private ActivityCreateNewPasswordBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView appLogo, @NonNull TextInputEditText confirmPasswordEditText,
      @NonNull TextInputLayout confirmPasswordInputLayout, @NonNull TextView instructionText,
      @NonNull TextInputEditText newPasswordEditText, @NonNull TextInputLayout passwordInputLayout,
      @NonNull ProgressBar passwordStrengthIndicator, @NonNull TextView passwordStrengthText,
      @NonNull MaterialButton resetButton, @NonNull TextView titleText) {
    this.rootView = rootView;
    this.appLogo = appLogo;
    this.confirmPasswordEditText = confirmPasswordEditText;
    this.confirmPasswordInputLayout = confirmPasswordInputLayout;
    this.instructionText = instructionText;
    this.newPasswordEditText = newPasswordEditText;
    this.passwordInputLayout = passwordInputLayout;
    this.passwordStrengthIndicator = passwordStrengthIndicator;
    this.passwordStrengthText = passwordStrengthText;
    this.resetButton = resetButton;
    this.titleText = titleText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCreateNewPasswordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCreateNewPasswordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_create_new_password, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCreateNewPasswordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appLogo;
      ImageView appLogo = ViewBindings.findChildViewById(rootView, id);
      if (appLogo == null) {
        break missingId;
      }

      id = R.id.confirmPasswordEditText;
      TextInputEditText confirmPasswordEditText = ViewBindings.findChildViewById(rootView, id);
      if (confirmPasswordEditText == null) {
        break missingId;
      }

      id = R.id.confirmPasswordInputLayout;
      TextInputLayout confirmPasswordInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (confirmPasswordInputLayout == null) {
        break missingId;
      }

      id = R.id.instructionText;
      TextView instructionText = ViewBindings.findChildViewById(rootView, id);
      if (instructionText == null) {
        break missingId;
      }

      id = R.id.newPasswordEditText;
      TextInputEditText newPasswordEditText = ViewBindings.findChildViewById(rootView, id);
      if (newPasswordEditText == null) {
        break missingId;
      }

      id = R.id.passwordInputLayout;
      TextInputLayout passwordInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (passwordInputLayout == null) {
        break missingId;
      }

      id = R.id.passwordStrengthIndicator;
      ProgressBar passwordStrengthIndicator = ViewBindings.findChildViewById(rootView, id);
      if (passwordStrengthIndicator == null) {
        break missingId;
      }

      id = R.id.passwordStrengthText;
      TextView passwordStrengthText = ViewBindings.findChildViewById(rootView, id);
      if (passwordStrengthText == null) {
        break missingId;
      }

      id = R.id.resetButton;
      MaterialButton resetButton = ViewBindings.findChildViewById(rootView, id);
      if (resetButton == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      return new ActivityCreateNewPasswordBinding((ConstraintLayout) rootView, appLogo,
          confirmPasswordEditText, confirmPasswordInputLayout, instructionText, newPasswordEditText,
          passwordInputLayout, passwordStrengthIndicator, passwordStrengthText, resetButton,
          titleText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
