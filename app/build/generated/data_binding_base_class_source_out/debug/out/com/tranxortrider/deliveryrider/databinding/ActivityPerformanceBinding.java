// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.charts.PieChart;
import com.google.android.material.button.MaterialButton;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPerformanceBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView averageDeliveryTimeText;

  @NonNull
  public final MaterialButton btnBack;

  @NonNull
  public final CardView contentView;

  @NonNull
  public final TextView deliveryCompletionRateText;

  @NonNull
  public final TextView errorMessageText;

  @NonNull
  public final LinearLayout errorView;

  @NonNull
  public final RecyclerView feedbackRecyclerView;

  @NonNull
  public final FrameLayout loadingView;

  @NonNull
  public final PieChart orderTypesChart;

  @NonNull
  public final TextView overallRatingText;

  @NonNull
  public final Button retryButton;

  @NonNull
  public final LineChart timePerformanceChart;

  @NonNull
  public final RelativeLayout topBar;

  @NonNull
  public final TextView totalCustomersServedText;

  private ActivityPerformanceBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView averageDeliveryTimeText, @NonNull MaterialButton btnBack,
      @NonNull CardView contentView, @NonNull TextView deliveryCompletionRateText,
      @NonNull TextView errorMessageText, @NonNull LinearLayout errorView,
      @NonNull RecyclerView feedbackRecyclerView, @NonNull FrameLayout loadingView,
      @NonNull PieChart orderTypesChart, @NonNull TextView overallRatingText,
      @NonNull Button retryButton, @NonNull LineChart timePerformanceChart,
      @NonNull RelativeLayout topBar, @NonNull TextView totalCustomersServedText) {
    this.rootView = rootView;
    this.averageDeliveryTimeText = averageDeliveryTimeText;
    this.btnBack = btnBack;
    this.contentView = contentView;
    this.deliveryCompletionRateText = deliveryCompletionRateText;
    this.errorMessageText = errorMessageText;
    this.errorView = errorView;
    this.feedbackRecyclerView = feedbackRecyclerView;
    this.loadingView = loadingView;
    this.orderTypesChart = orderTypesChart;
    this.overallRatingText = overallRatingText;
    this.retryButton = retryButton;
    this.timePerformanceChart = timePerformanceChart;
    this.topBar = topBar;
    this.totalCustomersServedText = totalCustomersServedText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPerformanceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPerformanceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_performance, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPerformanceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.averageDeliveryTimeText;
      TextView averageDeliveryTimeText = ViewBindings.findChildViewById(rootView, id);
      if (averageDeliveryTimeText == null) {
        break missingId;
      }

      id = R.id.btnBack;
      MaterialButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.contentView;
      CardView contentView = ViewBindings.findChildViewById(rootView, id);
      if (contentView == null) {
        break missingId;
      }

      id = R.id.deliveryCompletionRateText;
      TextView deliveryCompletionRateText = ViewBindings.findChildViewById(rootView, id);
      if (deliveryCompletionRateText == null) {
        break missingId;
      }

      id = R.id.errorMessageText;
      TextView errorMessageText = ViewBindings.findChildViewById(rootView, id);
      if (errorMessageText == null) {
        break missingId;
      }

      id = R.id.errorView;
      LinearLayout errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }

      id = R.id.feedbackRecyclerView;
      RecyclerView feedbackRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (feedbackRecyclerView == null) {
        break missingId;
      }

      id = R.id.loadingView;
      FrameLayout loadingView = ViewBindings.findChildViewById(rootView, id);
      if (loadingView == null) {
        break missingId;
      }

      id = R.id.orderTypesChart;
      PieChart orderTypesChart = ViewBindings.findChildViewById(rootView, id);
      if (orderTypesChart == null) {
        break missingId;
      }

      id = R.id.overallRatingText;
      TextView overallRatingText = ViewBindings.findChildViewById(rootView, id);
      if (overallRatingText == null) {
        break missingId;
      }

      id = R.id.retryButton;
      Button retryButton = ViewBindings.findChildViewById(rootView, id);
      if (retryButton == null) {
        break missingId;
      }

      id = R.id.timePerformanceChart;
      LineChart timePerformanceChart = ViewBindings.findChildViewById(rootView, id);
      if (timePerformanceChart == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.totalCustomersServedText;
      TextView totalCustomersServedText = ViewBindings.findChildViewById(rootView, id);
      if (totalCustomersServedText == null) {
        break missingId;
      }

      return new ActivityPerformanceBinding((RelativeLayout) rootView, averageDeliveryTimeText,
          btnBack, contentView, deliveryCompletionRateText, errorMessageText, errorView,
          feedbackRecyclerView, loadingView, orderTypesChart, overallRatingText, retryButton,
          timePerformanceChart, topBar, totalCustomersServedText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
