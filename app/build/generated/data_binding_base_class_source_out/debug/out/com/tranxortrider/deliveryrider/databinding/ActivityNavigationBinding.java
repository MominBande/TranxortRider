// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.osmdroid.views.MapView;

public final class ActivityNavigationBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button btnArrived;

  @NonNull
  public final MaterialButton btnBack;

  @NonNull
  public final Button btnCall;

  @NonNull
  public final FloatingActionButton btnCenterLocation;

  @NonNull
  public final FloatingActionButton btnRecalculate;

  @NonNull
  public final TextView destinationAddress;

  @NonNull
  public final CardView destinationPanel;

  @NonNull
  public final TextView destinationTitle;

  @NonNull
  public final TextView distanceValue;

  @NonNull
  public final ImageView instructionIcon;

  @NonNull
  public final TextView instructionText;

  @NonNull
  public final FrameLayout loadingOverlay;

  @NonNull
  public final FrameLayout mapContainer;

  @NonNull
  public final ImageView mapPlaceholder;

  @NonNull
  public final MapView mapView;

  @NonNull
  public final TextView timeRemainingValue;

  @NonNull
  public final RelativeLayout topBar;

  private ActivityNavigationBinding(@NonNull RelativeLayout rootView, @NonNull Button btnArrived,
      @NonNull MaterialButton btnBack, @NonNull Button btnCall,
      @NonNull FloatingActionButton btnCenterLocation, @NonNull FloatingActionButton btnRecalculate,
      @NonNull TextView destinationAddress, @NonNull CardView destinationPanel,
      @NonNull TextView destinationTitle, @NonNull TextView distanceValue,
      @NonNull ImageView instructionIcon, @NonNull TextView instructionText,
      @NonNull FrameLayout loadingOverlay, @NonNull FrameLayout mapContainer,
      @NonNull ImageView mapPlaceholder, @NonNull MapView mapView,
      @NonNull TextView timeRemainingValue, @NonNull RelativeLayout topBar) {
    this.rootView = rootView;
    this.btnArrived = btnArrived;
    this.btnBack = btnBack;
    this.btnCall = btnCall;
    this.btnCenterLocation = btnCenterLocation;
    this.btnRecalculate = btnRecalculate;
    this.destinationAddress = destinationAddress;
    this.destinationPanel = destinationPanel;
    this.destinationTitle = destinationTitle;
    this.distanceValue = distanceValue;
    this.instructionIcon = instructionIcon;
    this.instructionText = instructionText;
    this.loadingOverlay = loadingOverlay;
    this.mapContainer = mapContainer;
    this.mapPlaceholder = mapPlaceholder;
    this.mapView = mapView;
    this.timeRemainingValue = timeRemainingValue;
    this.topBar = topBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNavigationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNavigationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_navigation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNavigationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnArrived;
      Button btnArrived = ViewBindings.findChildViewById(rootView, id);
      if (btnArrived == null) {
        break missingId;
      }

      id = R.id.btnBack;
      MaterialButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btnCall;
      Button btnCall = ViewBindings.findChildViewById(rootView, id);
      if (btnCall == null) {
        break missingId;
      }

      id = R.id.btnCenterLocation;
      FloatingActionButton btnCenterLocation = ViewBindings.findChildViewById(rootView, id);
      if (btnCenterLocation == null) {
        break missingId;
      }

      id = R.id.btnRecalculate;
      FloatingActionButton btnRecalculate = ViewBindings.findChildViewById(rootView, id);
      if (btnRecalculate == null) {
        break missingId;
      }

      id = R.id.destinationAddress;
      TextView destinationAddress = ViewBindings.findChildViewById(rootView, id);
      if (destinationAddress == null) {
        break missingId;
      }

      id = R.id.destinationPanel;
      CardView destinationPanel = ViewBindings.findChildViewById(rootView, id);
      if (destinationPanel == null) {
        break missingId;
      }

      id = R.id.destinationTitle;
      TextView destinationTitle = ViewBindings.findChildViewById(rootView, id);
      if (destinationTitle == null) {
        break missingId;
      }

      id = R.id.distanceValue;
      TextView distanceValue = ViewBindings.findChildViewById(rootView, id);
      if (distanceValue == null) {
        break missingId;
      }

      id = R.id.instructionIcon;
      ImageView instructionIcon = ViewBindings.findChildViewById(rootView, id);
      if (instructionIcon == null) {
        break missingId;
      }

      id = R.id.instructionText;
      TextView instructionText = ViewBindings.findChildViewById(rootView, id);
      if (instructionText == null) {
        break missingId;
      }

      id = R.id.loadingOverlay;
      FrameLayout loadingOverlay = ViewBindings.findChildViewById(rootView, id);
      if (loadingOverlay == null) {
        break missingId;
      }

      id = R.id.mapContainer;
      FrameLayout mapContainer = ViewBindings.findChildViewById(rootView, id);
      if (mapContainer == null) {
        break missingId;
      }

      id = R.id.mapPlaceholder;
      ImageView mapPlaceholder = ViewBindings.findChildViewById(rootView, id);
      if (mapPlaceholder == null) {
        break missingId;
      }

      id = R.id.mapView;
      MapView mapView = ViewBindings.findChildViewById(rootView, id);
      if (mapView == null) {
        break missingId;
      }

      id = R.id.timeRemainingValue;
      TextView timeRemainingValue = ViewBindings.findChildViewById(rootView, id);
      if (timeRemainingValue == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      return new ActivityNavigationBinding((RelativeLayout) rootView, btnArrived, btnBack, btnCall,
          btnCenterLocation, btnRecalculate, destinationAddress, destinationPanel, destinationTitle,
          distanceValue, instructionIcon, instructionText, loadingOverlay, mapContainer,
          mapPlaceholder, mapView, timeRemainingValue, topBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
