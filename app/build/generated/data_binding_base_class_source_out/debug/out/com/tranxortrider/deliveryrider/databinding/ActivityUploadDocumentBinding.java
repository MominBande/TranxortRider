// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUploadDocumentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView backgroundCheckStatus;

  @NonNull
  public final TextView backgroundCheckText;

  @NonNull
  public final ImageView driverLicenseStatus;

  @NonNull
  public final TextView driverLicenseText;

  @NonNull
  public final TextView fileSizeLimitText;

  @NonNull
  public final TextView instructionText;

  @NonNull
  public final MaterialButton nextButton;

  @NonNull
  public final TextView titleText;

  @NonNull
  public final View topBarBackground;

  @NonNull
  public final MaterialButton uploaddriverLicenseButton;

  @NonNull
  public final MaterialButton uploadgovernmentIdButton;

  @NonNull
  public final MaterialButton uploadworkAuthorizationButton;

  @NonNull
  public final ImageView vehicleInsuranceStatus;

  @NonNull
  public final TextView vehicleInsuranceText;

  @NonNull
  public final ImageView vehicleRegistrationStatus;

  @NonNull
  public final TextView vehicleRegistrationText;

  private ActivityUploadDocumentBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView backgroundCheckStatus, @NonNull TextView backgroundCheckText,
      @NonNull ImageView driverLicenseStatus, @NonNull TextView driverLicenseText,
      @NonNull TextView fileSizeLimitText, @NonNull TextView instructionText,
      @NonNull MaterialButton nextButton, @NonNull TextView titleText,
      @NonNull View topBarBackground, @NonNull MaterialButton uploaddriverLicenseButton,
      @NonNull MaterialButton uploadgovernmentIdButton,
      @NonNull MaterialButton uploadworkAuthorizationButton,
      @NonNull ImageView vehicleInsuranceStatus, @NonNull TextView vehicleInsuranceText,
      @NonNull ImageView vehicleRegistrationStatus, @NonNull TextView vehicleRegistrationText) {
    this.rootView = rootView;
    this.backgroundCheckStatus = backgroundCheckStatus;
    this.backgroundCheckText = backgroundCheckText;
    this.driverLicenseStatus = driverLicenseStatus;
    this.driverLicenseText = driverLicenseText;
    this.fileSizeLimitText = fileSizeLimitText;
    this.instructionText = instructionText;
    this.nextButton = nextButton;
    this.titleText = titleText;
    this.topBarBackground = topBarBackground;
    this.uploaddriverLicenseButton = uploaddriverLicenseButton;
    this.uploadgovernmentIdButton = uploadgovernmentIdButton;
    this.uploadworkAuthorizationButton = uploadworkAuthorizationButton;
    this.vehicleInsuranceStatus = vehicleInsuranceStatus;
    this.vehicleInsuranceText = vehicleInsuranceText;
    this.vehicleRegistrationStatus = vehicleRegistrationStatus;
    this.vehicleRegistrationText = vehicleRegistrationText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUploadDocumentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUploadDocumentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_upload_document, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUploadDocumentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backgroundCheckStatus;
      ImageView backgroundCheckStatus = ViewBindings.findChildViewById(rootView, id);
      if (backgroundCheckStatus == null) {
        break missingId;
      }

      id = R.id.backgroundCheckText;
      TextView backgroundCheckText = ViewBindings.findChildViewById(rootView, id);
      if (backgroundCheckText == null) {
        break missingId;
      }

      id = R.id.driverLicenseStatus;
      ImageView driverLicenseStatus = ViewBindings.findChildViewById(rootView, id);
      if (driverLicenseStatus == null) {
        break missingId;
      }

      id = R.id.driverLicenseText;
      TextView driverLicenseText = ViewBindings.findChildViewById(rootView, id);
      if (driverLicenseText == null) {
        break missingId;
      }

      id = R.id.fileSizeLimitText;
      TextView fileSizeLimitText = ViewBindings.findChildViewById(rootView, id);
      if (fileSizeLimitText == null) {
        break missingId;
      }

      id = R.id.instructionText;
      TextView instructionText = ViewBindings.findChildViewById(rootView, id);
      if (instructionText == null) {
        break missingId;
      }

      id = R.id.nextButton;
      MaterialButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      id = R.id.topBarBackground;
      View topBarBackground = ViewBindings.findChildViewById(rootView, id);
      if (topBarBackground == null) {
        break missingId;
      }

      id = R.id.uploaddriverLicenseButton;
      MaterialButton uploaddriverLicenseButton = ViewBindings.findChildViewById(rootView, id);
      if (uploaddriverLicenseButton == null) {
        break missingId;
      }

      id = R.id.uploadgovernmentIdButton;
      MaterialButton uploadgovernmentIdButton = ViewBindings.findChildViewById(rootView, id);
      if (uploadgovernmentIdButton == null) {
        break missingId;
      }

      id = R.id.uploadworkAuthorizationButton;
      MaterialButton uploadworkAuthorizationButton = ViewBindings.findChildViewById(rootView, id);
      if (uploadworkAuthorizationButton == null) {
        break missingId;
      }

      id = R.id.vehicleInsuranceStatus;
      ImageView vehicleInsuranceStatus = ViewBindings.findChildViewById(rootView, id);
      if (vehicleInsuranceStatus == null) {
        break missingId;
      }

      id = R.id.vehicleInsuranceText;
      TextView vehicleInsuranceText = ViewBindings.findChildViewById(rootView, id);
      if (vehicleInsuranceText == null) {
        break missingId;
      }

      id = R.id.vehicleRegistrationStatus;
      ImageView vehicleRegistrationStatus = ViewBindings.findChildViewById(rootView, id);
      if (vehicleRegistrationStatus == null) {
        break missingId;
      }

      id = R.id.vehicleRegistrationText;
      TextView vehicleRegistrationText = ViewBindings.findChildViewById(rootView, id);
      if (vehicleRegistrationText == null) {
        break missingId;
      }

      return new ActivityUploadDocumentBinding((ConstraintLayout) rootView, backgroundCheckStatus,
          backgroundCheckText, driverLicenseStatus, driverLicenseText, fileSizeLimitText,
          instructionText, nextButton, titleText, topBarBackground, uploaddriverLicenseButton,
          uploadgovernmentIdButton, uploadworkAuthorizationButton, vehicleInsuranceStatus,
          vehicleInsuranceText, vehicleRegistrationStatus, vehicleRegistrationText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
