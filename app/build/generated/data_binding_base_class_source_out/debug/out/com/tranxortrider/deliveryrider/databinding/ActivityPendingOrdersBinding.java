// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.tabs.TabLayout;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPendingOrdersBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LayoutBottomNavigationBinding bottomNavigation;

  @NonNull
  public final SwitchCompat btnDutyStatus;

  @NonNull
  public final ImageView btnNotifications;

  @NonNull
  public final MaterialButton btnRefresh;

  @NonNull
  public final ImageView btnSearch;

  @NonNull
  public final LinearLayout emptyStateView;

  @NonNull
  public final FrameLayout loadingView;

  @NonNull
  public final RelativeLayout main;

  @NonNull
  public final TabLayout orderStatusTabs;

  @NonNull
  public final RecyclerView pendingOrdersRecyclerView;

  @NonNull
  public final ShapeableImageView profileImage;

  @NonNull
  public final MaterialCardView profileSection;

  @NonNull
  public final RelativeLayout topBar;

  @NonNull
  public final TextView tvDutyStatus;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvTitle;

  private ActivityPendingOrdersBinding(@NonNull RelativeLayout rootView,
      @NonNull LayoutBottomNavigationBinding bottomNavigation, @NonNull SwitchCompat btnDutyStatus,
      @NonNull ImageView btnNotifications, @NonNull MaterialButton btnRefresh,
      @NonNull ImageView btnSearch, @NonNull LinearLayout emptyStateView,
      @NonNull FrameLayout loadingView, @NonNull RelativeLayout main,
      @NonNull TabLayout orderStatusTabs, @NonNull RecyclerView pendingOrdersRecyclerView,
      @NonNull ShapeableImageView profileImage, @NonNull MaterialCardView profileSection,
      @NonNull RelativeLayout topBar, @NonNull TextView tvDutyStatus, @NonNull TextView tvName,
      @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.bottomNavigation = bottomNavigation;
    this.btnDutyStatus = btnDutyStatus;
    this.btnNotifications = btnNotifications;
    this.btnRefresh = btnRefresh;
    this.btnSearch = btnSearch;
    this.emptyStateView = emptyStateView;
    this.loadingView = loadingView;
    this.main = main;
    this.orderStatusTabs = orderStatusTabs;
    this.pendingOrdersRecyclerView = pendingOrdersRecyclerView;
    this.profileImage = profileImage;
    this.profileSection = profileSection;
    this.topBar = topBar;
    this.tvDutyStatus = tvDutyStatus;
    this.tvName = tvName;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPendingOrdersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPendingOrdersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pending_orders, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPendingOrdersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigation;
      View bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }
      LayoutBottomNavigationBinding binding_bottomNavigation = LayoutBottomNavigationBinding.bind(bottomNavigation);

      id = R.id.btnDutyStatus;
      SwitchCompat btnDutyStatus = ViewBindings.findChildViewById(rootView, id);
      if (btnDutyStatus == null) {
        break missingId;
      }

      id = R.id.btnNotifications;
      ImageView btnNotifications = ViewBindings.findChildViewById(rootView, id);
      if (btnNotifications == null) {
        break missingId;
      }

      id = R.id.btnRefresh;
      MaterialButton btnRefresh = ViewBindings.findChildViewById(rootView, id);
      if (btnRefresh == null) {
        break missingId;
      }

      id = R.id.btnSearch;
      ImageView btnSearch = ViewBindings.findChildViewById(rootView, id);
      if (btnSearch == null) {
        break missingId;
      }

      id = R.id.emptyStateView;
      LinearLayout emptyStateView = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateView == null) {
        break missingId;
      }

      id = R.id.loadingView;
      FrameLayout loadingView = ViewBindings.findChildViewById(rootView, id);
      if (loadingView == null) {
        break missingId;
      }

      RelativeLayout main = (RelativeLayout) rootView;

      id = R.id.orderStatusTabs;
      TabLayout orderStatusTabs = ViewBindings.findChildViewById(rootView, id);
      if (orderStatusTabs == null) {
        break missingId;
      }

      id = R.id.pendingOrdersRecyclerView;
      RecyclerView pendingOrdersRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (pendingOrdersRecyclerView == null) {
        break missingId;
      }

      id = R.id.profileImage;
      ShapeableImageView profileImage = ViewBindings.findChildViewById(rootView, id);
      if (profileImage == null) {
        break missingId;
      }

      id = R.id.profileSection;
      MaterialCardView profileSection = ViewBindings.findChildViewById(rootView, id);
      if (profileSection == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.tvDutyStatus;
      TextView tvDutyStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvDutyStatus == null) {
        break missingId;
      }

      id = R.id.tvName;
      TextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new ActivityPendingOrdersBinding((RelativeLayout) rootView, binding_bottomNavigation,
          btnDutyStatus, btnNotifications, btnRefresh, btnSearch, emptyStateView, loadingView, main,
          orderStatusTabs, pendingOrdersRecyclerView, profileImage, profileSection, topBar,
          tvDutyStatus, tvName, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
