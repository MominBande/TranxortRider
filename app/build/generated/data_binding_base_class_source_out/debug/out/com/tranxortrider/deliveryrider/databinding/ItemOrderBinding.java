// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final LinearLayout actionButtonsSection;

  @NonNull
  public final ConstraintLayout addressSection;

  @NonNull
  public final ImageView btnCall;

  @NonNull
  public final ImageView btnMap;

  @NonNull
  public final ImageView btnMessage;

  @NonNull
  public final MaterialButton btnShowDetails;

  @NonNull
  public final MaterialCardView deliveryMarkerCard;

  @NonNull
  public final View divider;

  @NonNull
  public final LinearLayout orderNumberSection;

  @NonNull
  public final MaterialCardView pickupMarkerCard;

  @NonNull
  public final View routeLine;

  @NonNull
  public final HorizontalScrollView statusScrollView;

  @NonNull
  public final LinearLayout statusSection;

  @NonNull
  public final MaterialCardView tapToOpenCard;

  @NonNull
  public final TextView tvAmount;

  @NonNull
  public final TextView tvDeliveryAddress;

  @NonNull
  public final TextView tvOrderNumber;

  @NonNull
  public final TextView tvPickupAddress;

  @NonNull
  public final TextView tvStatus;

  @NonNull
  public final TextView tvTime;

  @NonNull
  public final TextView tvToLabel;

  private ItemOrderBinding(@NonNull MaterialCardView rootView,
      @NonNull LinearLayout actionButtonsSection, @NonNull ConstraintLayout addressSection,
      @NonNull ImageView btnCall, @NonNull ImageView btnMap, @NonNull ImageView btnMessage,
      @NonNull MaterialButton btnShowDetails, @NonNull MaterialCardView deliveryMarkerCard,
      @NonNull View divider, @NonNull LinearLayout orderNumberSection,
      @NonNull MaterialCardView pickupMarkerCard, @NonNull View routeLine,
      @NonNull HorizontalScrollView statusScrollView, @NonNull LinearLayout statusSection,
      @NonNull MaterialCardView tapToOpenCard, @NonNull TextView tvAmount,
      @NonNull TextView tvDeliveryAddress, @NonNull TextView tvOrderNumber,
      @NonNull TextView tvPickupAddress, @NonNull TextView tvStatus, @NonNull TextView tvTime,
      @NonNull TextView tvToLabel) {
    this.rootView = rootView;
    this.actionButtonsSection = actionButtonsSection;
    this.addressSection = addressSection;
    this.btnCall = btnCall;
    this.btnMap = btnMap;
    this.btnMessage = btnMessage;
    this.btnShowDetails = btnShowDetails;
    this.deliveryMarkerCard = deliveryMarkerCard;
    this.divider = divider;
    this.orderNumberSection = orderNumberSection;
    this.pickupMarkerCard = pickupMarkerCard;
    this.routeLine = routeLine;
    this.statusScrollView = statusScrollView;
    this.statusSection = statusSection;
    this.tapToOpenCard = tapToOpenCard;
    this.tvAmount = tvAmount;
    this.tvDeliveryAddress = tvDeliveryAddress;
    this.tvOrderNumber = tvOrderNumber;
    this.tvPickupAddress = tvPickupAddress;
    this.tvStatus = tvStatus;
    this.tvTime = tvTime;
    this.tvToLabel = tvToLabel;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionButtonsSection;
      LinearLayout actionButtonsSection = ViewBindings.findChildViewById(rootView, id);
      if (actionButtonsSection == null) {
        break missingId;
      }

      id = R.id.addressSection;
      ConstraintLayout addressSection = ViewBindings.findChildViewById(rootView, id);
      if (addressSection == null) {
        break missingId;
      }

      id = R.id.btnCall;
      ImageView btnCall = ViewBindings.findChildViewById(rootView, id);
      if (btnCall == null) {
        break missingId;
      }

      id = R.id.btnMap;
      ImageView btnMap = ViewBindings.findChildViewById(rootView, id);
      if (btnMap == null) {
        break missingId;
      }

      id = R.id.btnMessage;
      ImageView btnMessage = ViewBindings.findChildViewById(rootView, id);
      if (btnMessage == null) {
        break missingId;
      }

      id = R.id.btnShowDetails;
      MaterialButton btnShowDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnShowDetails == null) {
        break missingId;
      }

      id = R.id.deliveryMarkerCard;
      MaterialCardView deliveryMarkerCard = ViewBindings.findChildViewById(rootView, id);
      if (deliveryMarkerCard == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.orderNumberSection;
      LinearLayout orderNumberSection = ViewBindings.findChildViewById(rootView, id);
      if (orderNumberSection == null) {
        break missingId;
      }

      id = R.id.pickupMarkerCard;
      MaterialCardView pickupMarkerCard = ViewBindings.findChildViewById(rootView, id);
      if (pickupMarkerCard == null) {
        break missingId;
      }

      id = R.id.routeLine;
      View routeLine = ViewBindings.findChildViewById(rootView, id);
      if (routeLine == null) {
        break missingId;
      }

      id = R.id.statusScrollView;
      HorizontalScrollView statusScrollView = ViewBindings.findChildViewById(rootView, id);
      if (statusScrollView == null) {
        break missingId;
      }

      id = R.id.statusSection;
      LinearLayout statusSection = ViewBindings.findChildViewById(rootView, id);
      if (statusSection == null) {
        break missingId;
      }

      id = R.id.tapToOpenCard;
      MaterialCardView tapToOpenCard = ViewBindings.findChildViewById(rootView, id);
      if (tapToOpenCard == null) {
        break missingId;
      }

      id = R.id.tvAmount;
      TextView tvAmount = ViewBindings.findChildViewById(rootView, id);
      if (tvAmount == null) {
        break missingId;
      }

      id = R.id.tvDeliveryAddress;
      TextView tvDeliveryAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvDeliveryAddress == null) {
        break missingId;
      }

      id = R.id.tvOrderNumber;
      TextView tvOrderNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvOrderNumber == null) {
        break missingId;
      }

      id = R.id.tvPickupAddress;
      TextView tvPickupAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvPickupAddress == null) {
        break missingId;
      }

      id = R.id.tvStatus;
      TextView tvStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvStatus == null) {
        break missingId;
      }

      id = R.id.tvTime;
      TextView tvTime = ViewBindings.findChildViewById(rootView, id);
      if (tvTime == null) {
        break missingId;
      }

      id = R.id.tvToLabel;
      TextView tvToLabel = ViewBindings.findChildViewById(rootView, id);
      if (tvToLabel == null) {
        break missingId;
      }

      return new ItemOrderBinding((MaterialCardView) rootView, actionButtonsSection, addressSection,
          btnCall, btnMap, btnMessage, btnShowDetails, deliveryMarkerCard, divider,
          orderNumberSection, pickupMarkerCard, routeLine, statusScrollView, statusSection,
          tapToOpenCard, tvAmount, tvDeliveryAddress, tvOrderNumber, tvPickupAddress, tvStatus,
          tvTime, tvToLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
