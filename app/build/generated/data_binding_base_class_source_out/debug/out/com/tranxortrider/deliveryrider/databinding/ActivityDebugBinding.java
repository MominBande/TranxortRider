// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDebugBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout buttonContainer;

  @NonNull
  public final Button clearLogButton;

  @NonNull
  public final TextView logTextView;

  @NonNull
  public final Button testAuthButton;

  @NonNull
  public final Button testFirestoreButton;

  @NonNull
  public final Button testOrdersButton;

  @NonNull
  public final TextView titleTextView;

  private ActivityDebugBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout buttonContainer, @NonNull Button clearLogButton,
      @NonNull TextView logTextView, @NonNull Button testAuthButton,
      @NonNull Button testFirestoreButton, @NonNull Button testOrdersButton,
      @NonNull TextView titleTextView) {
    this.rootView = rootView;
    this.buttonContainer = buttonContainer;
    this.clearLogButton = clearLogButton;
    this.logTextView = logTextView;
    this.testAuthButton = testAuthButton;
    this.testFirestoreButton = testFirestoreButton;
    this.testOrdersButton = testOrdersButton;
    this.titleTextView = titleTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDebugBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDebugBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_debug, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDebugBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonContainer;
      LinearLayout buttonContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonContainer == null) {
        break missingId;
      }

      id = R.id.clearLogButton;
      Button clearLogButton = ViewBindings.findChildViewById(rootView, id);
      if (clearLogButton == null) {
        break missingId;
      }

      id = R.id.logTextView;
      TextView logTextView = ViewBindings.findChildViewById(rootView, id);
      if (logTextView == null) {
        break missingId;
      }

      id = R.id.testAuthButton;
      Button testAuthButton = ViewBindings.findChildViewById(rootView, id);
      if (testAuthButton == null) {
        break missingId;
      }

      id = R.id.testFirestoreButton;
      Button testFirestoreButton = ViewBindings.findChildViewById(rootView, id);
      if (testFirestoreButton == null) {
        break missingId;
      }

      id = R.id.testOrdersButton;
      Button testOrdersButton = ViewBindings.findChildViewById(rootView, id);
      if (testOrdersButton == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = ViewBindings.findChildViewById(rootView, id);
      if (titleTextView == null) {
        break missingId;
      }

      return new ActivityDebugBinding((ConstraintLayout) rootView, buttonContainer, clearLogButton,
          logTextView, testAuthButton, testFirestoreButton, testOrdersButton, titleTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
