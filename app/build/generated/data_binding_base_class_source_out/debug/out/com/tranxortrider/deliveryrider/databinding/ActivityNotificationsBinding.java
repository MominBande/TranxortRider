// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNotificationsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialButton btnBack;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipUnread;

  @NonNull
  public final MaterialButton clearAllButton;

  @NonNull
  public final CardView dateHeaderCard;

  @NonNull
  public final LinearLayout emptyStateContainer;

  @NonNull
  public final TextView emptyStateMessage;

  @NonNull
  public final TextView emptyStateTitle;

  @NonNull
  public final HorizontalScrollView filterSection;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RelativeLayout topBar;

  private ActivityNotificationsBinding(@NonNull RelativeLayout rootView,
      @NonNull MaterialButton btnBack, @NonNull Chip chipAll, @NonNull Chip chipUnread,
      @NonNull MaterialButton clearAllButton, @NonNull CardView dateHeaderCard,
      @NonNull LinearLayout emptyStateContainer, @NonNull TextView emptyStateMessage,
      @NonNull TextView emptyStateTitle, @NonNull HorizontalScrollView filterSection,
      @NonNull RecyclerView recyclerView, @NonNull RelativeLayout topBar) {
    this.rootView = rootView;
    this.btnBack = btnBack;
    this.chipAll = chipAll;
    this.chipUnread = chipUnread;
    this.clearAllButton = clearAllButton;
    this.dateHeaderCard = dateHeaderCard;
    this.emptyStateContainer = emptyStateContainer;
    this.emptyStateMessage = emptyStateMessage;
    this.emptyStateTitle = emptyStateTitle;
    this.filterSection = filterSection;
    this.recyclerView = recyclerView;
    this.topBar = topBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNotificationsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNotificationsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_notifications, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNotificationsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBack;
      MaterialButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipUnread;
      Chip chipUnread = ViewBindings.findChildViewById(rootView, id);
      if (chipUnread == null) {
        break missingId;
      }

      id = R.id.clearAllButton;
      MaterialButton clearAllButton = ViewBindings.findChildViewById(rootView, id);
      if (clearAllButton == null) {
        break missingId;
      }

      id = R.id.dateHeaderCard;
      CardView dateHeaderCard = ViewBindings.findChildViewById(rootView, id);
      if (dateHeaderCard == null) {
        break missingId;
      }

      id = R.id.emptyStateContainer;
      LinearLayout emptyStateContainer = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateContainer == null) {
        break missingId;
      }

      id = R.id.emptyStateMessage;
      TextView emptyStateMessage = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateMessage == null) {
        break missingId;
      }

      id = R.id.emptyStateTitle;
      TextView emptyStateTitle = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateTitle == null) {
        break missingId;
      }

      id = R.id.filterSection;
      HorizontalScrollView filterSection = ViewBindings.findChildViewById(rootView, id);
      if (filterSection == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      return new ActivityNotificationsBinding((RelativeLayout) rootView, btnBack, chipAll,
          chipUnread, clearAllButton, dateHeaderCard, emptyStateContainer, emptyStateMessage,
          emptyStateTitle, filterSection, recyclerView, topBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
