// Generated by view binder compiler. Do not edit!
package com.tranxortrider.deliveryrider.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.tranxortrider.deliveryrider.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHomeScreenBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LayoutBottomNavigationBinding bottomNavigation;

  @NonNull
  public final SwitchCompat btnDutyStatus;

  @NonNull
  public final MaterialButton btnNotifications;

  @NonNull
  public final MaterialButton btnSearch;

  @NonNull
  public final TextView deliveriesTitle;

  @NonNull
  public final LinearLayout emptyOrdersView;

  @NonNull
  public final FloatingActionButton fabScanner;

  @NonNull
  public final MaterialButton filterAccepted;

  @NonNull
  public final MaterialButton filterAll;

  @NonNull
  public final HorizontalScrollView filterButtonsContainer;

  @NonNull
  public final MaterialButton filterCompleted;

  @NonNull
  public final MaterialButton filterPending;

  @NonNull
  public final ProgressBar loadingView;

  @NonNull
  public final TextView notificationCount;

  @NonNull
  public final TextView ordersTitle;

  @NonNull
  public final RecyclerView pendingOrdersRecyclerView;

  @NonNull
  public final ShapeableImageView profileImage;

  @NonNull
  public final MaterialCardView profileSection;

  @NonNull
  public final NestedScrollView scrollView;

  @NonNull
  public final LinearLayout statsSection;

  @NonNull
  public final RelativeLayout topBar;

  @NonNull
  public final TextView tvDeliveryCount;

  @NonNull
  public final TextView tvDutyStatus;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvOnTimeRate;

  @NonNull
  public final TextView tvTitle;

  private ActivityHomeScreenBinding(@NonNull RelativeLayout rootView,
      @NonNull LayoutBottomNavigationBinding bottomNavigation, @NonNull SwitchCompat btnDutyStatus,
      @NonNull MaterialButton btnNotifications, @NonNull MaterialButton btnSearch,
      @NonNull TextView deliveriesTitle, @NonNull LinearLayout emptyOrdersView,
      @NonNull FloatingActionButton fabScanner, @NonNull MaterialButton filterAccepted,
      @NonNull MaterialButton filterAll, @NonNull HorizontalScrollView filterButtonsContainer,
      @NonNull MaterialButton filterCompleted, @NonNull MaterialButton filterPending,
      @NonNull ProgressBar loadingView, @NonNull TextView notificationCount,
      @NonNull TextView ordersTitle, @NonNull RecyclerView pendingOrdersRecyclerView,
      @NonNull ShapeableImageView profileImage, @NonNull MaterialCardView profileSection,
      @NonNull NestedScrollView scrollView, @NonNull LinearLayout statsSection,
      @NonNull RelativeLayout topBar, @NonNull TextView tvDeliveryCount,
      @NonNull TextView tvDutyStatus, @NonNull TextView tvName, @NonNull TextView tvOnTimeRate,
      @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.bottomNavigation = bottomNavigation;
    this.btnDutyStatus = btnDutyStatus;
    this.btnNotifications = btnNotifications;
    this.btnSearch = btnSearch;
    this.deliveriesTitle = deliveriesTitle;
    this.emptyOrdersView = emptyOrdersView;
    this.fabScanner = fabScanner;
    this.filterAccepted = filterAccepted;
    this.filterAll = filterAll;
    this.filterButtonsContainer = filterButtonsContainer;
    this.filterCompleted = filterCompleted;
    this.filterPending = filterPending;
    this.loadingView = loadingView;
    this.notificationCount = notificationCount;
    this.ordersTitle = ordersTitle;
    this.pendingOrdersRecyclerView = pendingOrdersRecyclerView;
    this.profileImage = profileImage;
    this.profileSection = profileSection;
    this.scrollView = scrollView;
    this.statsSection = statsSection;
    this.topBar = topBar;
    this.tvDeliveryCount = tvDeliveryCount;
    this.tvDutyStatus = tvDutyStatus;
    this.tvName = tvName;
    this.tvOnTimeRate = tvOnTimeRate;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHomeScreenBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHomeScreenBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_home_screen, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHomeScreenBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigation;
      View bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }
      LayoutBottomNavigationBinding binding_bottomNavigation = LayoutBottomNavigationBinding.bind(bottomNavigation);

      id = R.id.btnDutyStatus;
      SwitchCompat btnDutyStatus = ViewBindings.findChildViewById(rootView, id);
      if (btnDutyStatus == null) {
        break missingId;
      }

      id = R.id.btnNotifications;
      MaterialButton btnNotifications = ViewBindings.findChildViewById(rootView, id);
      if (btnNotifications == null) {
        break missingId;
      }

      id = R.id.btnSearch;
      MaterialButton btnSearch = ViewBindings.findChildViewById(rootView, id);
      if (btnSearch == null) {
        break missingId;
      }

      id = R.id.deliveriesTitle;
      TextView deliveriesTitle = ViewBindings.findChildViewById(rootView, id);
      if (deliveriesTitle == null) {
        break missingId;
      }

      id = R.id.emptyOrdersView;
      LinearLayout emptyOrdersView = ViewBindings.findChildViewById(rootView, id);
      if (emptyOrdersView == null) {
        break missingId;
      }

      id = R.id.fabScanner;
      FloatingActionButton fabScanner = ViewBindings.findChildViewById(rootView, id);
      if (fabScanner == null) {
        break missingId;
      }

      id = R.id.filterAccepted;
      MaterialButton filterAccepted = ViewBindings.findChildViewById(rootView, id);
      if (filterAccepted == null) {
        break missingId;
      }

      id = R.id.filterAll;
      MaterialButton filterAll = ViewBindings.findChildViewById(rootView, id);
      if (filterAll == null) {
        break missingId;
      }

      id = R.id.filterButtonsContainer;
      HorizontalScrollView filterButtonsContainer = ViewBindings.findChildViewById(rootView, id);
      if (filterButtonsContainer == null) {
        break missingId;
      }

      id = R.id.filterCompleted;
      MaterialButton filterCompleted = ViewBindings.findChildViewById(rootView, id);
      if (filterCompleted == null) {
        break missingId;
      }

      id = R.id.filterPending;
      MaterialButton filterPending = ViewBindings.findChildViewById(rootView, id);
      if (filterPending == null) {
        break missingId;
      }

      id = R.id.loadingView;
      ProgressBar loadingView = ViewBindings.findChildViewById(rootView, id);
      if (loadingView == null) {
        break missingId;
      }

      id = R.id.notificationCount;
      TextView notificationCount = ViewBindings.findChildViewById(rootView, id);
      if (notificationCount == null) {
        break missingId;
      }

      id = R.id.ordersTitle;
      TextView ordersTitle = ViewBindings.findChildViewById(rootView, id);
      if (ordersTitle == null) {
        break missingId;
      }

      id = R.id.pendingOrdersRecyclerView;
      RecyclerView pendingOrdersRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (pendingOrdersRecyclerView == null) {
        break missingId;
      }

      id = R.id.profileImage;
      ShapeableImageView profileImage = ViewBindings.findChildViewById(rootView, id);
      if (profileImage == null) {
        break missingId;
      }

      id = R.id.profileSection;
      MaterialCardView profileSection = ViewBindings.findChildViewById(rootView, id);
      if (profileSection == null) {
        break missingId;
      }

      id = R.id.scrollView;
      NestedScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.statsSection;
      LinearLayout statsSection = ViewBindings.findChildViewById(rootView, id);
      if (statsSection == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.tvDeliveryCount;
      TextView tvDeliveryCount = ViewBindings.findChildViewById(rootView, id);
      if (tvDeliveryCount == null) {
        break missingId;
      }

      id = R.id.tvDutyStatus;
      TextView tvDutyStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvDutyStatus == null) {
        break missingId;
      }

      id = R.id.tvName;
      TextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tvOnTimeRate;
      TextView tvOnTimeRate = ViewBindings.findChildViewById(rootView, id);
      if (tvOnTimeRate == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new ActivityHomeScreenBinding((RelativeLayout) rootView, binding_bottomNavigation,
          btnDutyStatus, btnNotifications, btnSearch, deliveriesTitle, emptyOrdersView, fabScanner,
          filterAccepted, filterAll, filterButtonsContainer, filterCompleted, filterPending,
          loadingView, notificationCount, ordersTitle, pendingOrdersRecyclerView, profileImage,
          profileSection, scrollView, statsSection, topBar, tvDeliveryCount, tvDutyStatus, tvName,
          tvOnTimeRate, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
